#! /usr/bin/env python
import rospy

import actionlib

from allegro_hand_kdl.msg import PoseControlAction, PoseControlGoal, PoseControlResult, PoseControlFeedback
from geometry_msgs.msg import Pose

# this is an example program to use the pose action server
def main():

    client =\
        actionlib.SimpleActionClient('pose_control_action', PoseControlAction)

    client.wait_for_server()

    # create a cartesian pose for testing
    # 'relax' pose from cartesian_poses.yaml
    finger_poses = []
    # position [x, y, z] + quaternion [x, y, z, w]
    finger_poses.append(list_to_pose([0.0935, 0.0873, 0.1425, 0.9597, 0.2028, 0.1940, 0.0015]))
    finger_poses.append(list_to_pose([0.1064, 0.0092, 0.1627, 0.9020, 0.0393, 0.4294, -0.0178]))
    finger_poses.append(list_to_pose([0.0979, -0.0651, 0.1759, 0.8645, -0.0846, 0.4953, -0.0005]))
    finger_poses.append(list_to_pose([0.1313, 0.0571, 0.0233, -0.0800, 0.2823, 0.1284, 0.9472]))

    # send the pose to the server
    goal = PoseControlGoal(cartesian_pose=finger_poses)
    client.send_goal(goal, feedback_cb=feedbackCallback)
    # to test the feedback mechanism:
    global feedbacks_received
    feedbacks_received = False

    client.wait_for_result()

    print("pose_action_client: finished cartesian pose execution")
    print("feedbacks received: "+ str(feedbacks_received))

    rospy.sleep(2.0)
    client.wait_for_server()

    # create a joint pose for testing
    # 'point1' pose from joint_poses.yaml
    joint_pose = \
        [0.06, 0.50, 0.13, -0.14,\
        0.0, 1.32, 1.72, 0.0,\
        0.0, 1.32, 1.72, 0.0,\
        0.72, 0.01, 0.40, 1.5]

    # send the pose to the server
    goal = PoseControlGoal(joint_pose=joint_pose)
    client.send_goal(goal, feedback_cb=feedbackCallback)
    # to test the feedback mechanism:
    feedbacks_received = False

    client.wait_for_result()

    print("pose_action_client: finished joint pose execution")
    print("feedbacks received: "+ str(feedbacks_received))


def feedbackCallback(feedback):
    global feedbacks_received
    feedbacks_received = True

    rospy.logdebug("pose_action_client: got feedback:")
    rospy.logdebug(feedback)


def list_to_pose(list):
    pose = Pose()
    pose.position.x = list[0]
    pose.position.y = list[1]
    pose.position.z = list[2]
    pose.orientation.x = list[3]
    pose.orientation.y = list[4]
    pose.orientation.z = list[5]
    pose.orientation.w = list[6]
    return pose


if __name__ == '__main__':
    try:
        rospy.init_node('pose_action_client')
        main()
    except rospy.ROSInterruptException:
        print("pose_action_client: interrupted by signal")
    print("pose_action_client: terminating")
